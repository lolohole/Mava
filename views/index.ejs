<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="UTF-8" />
  <title>Mava</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
<script defer src="https://progressier.app/3HhoUE9IzFxgDe2LARm8/script.js"></script> 
<meta name="theme-color" content="#317EFB">
<link rel="manifest" href="https://progressier.app/3HhoUE9IzFxgDe2LARm8/progressier.json"/><script defer src="https://progressier.app/3HhoUE9IzFxgDe2LARm8/script.js"></script> 

  <!-- Ads -->

<meta name="monetag" content="008d7a27ce3be5ca025ea1e003869c57">

  <!-- Ads -->





  <!-- Bootstrap 5 RTL -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <meta property="og:title" content="Title of your page">
<meta property="og:description" content="Description of your page">
<meta property="og:image" content="URL of your image">
<meta property="og:url" content="URL of your page">

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:title" content="Title of your page">
<meta name="twitter:description" content="Description of your page">
<meta name="twitter:image" content="URL of your image">

  <style>
    body {
      background-color: #fafafa;
      font-family: 'Arial', sans-serif;
      padding-bottom: 70px;
    }

    .navbar {
      background-color: white;
      border-bottom: 1px solid #ddd;
    }

    .navbar-brand {
      font-weight: bold;
    }

    .post-card {
      background: white;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin-bottom: 20px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .post-card img.post-image {
      width: 100%;
      height: auto;
      border-bottom: 1px solid #eee;
    }

    .post-header {
      display: flex;
      align-items: center;
      padding: 10px;
    }

    .post-header img {
      border-radius: 50%;
      width: 40px;
      height: 40px;
      object-fit: cover;
      margin-left: 10px;
    }

    .post-caption {
      padding: 10px;
      font-size: 14px;
      white-space: pre-wrap;
    }

    .post-actions {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 10px;
      font-size: 24px;
      user-select: none;
    }

    .post-actions .left-icons i,
    .post-actions .right-icons i {
      cursor: pointer;
      margin: 0 8px;
      transition: color 0.3s ease;
    }

    .post-actions .left-icons i:hover {
      color: #0d6efd;
    }

    .likes-count {
      padding: 0 10px 10px;
      font-weight: bold;
      font-size: 14px;
      cursor: default;
    }

    .comments-section {
      padding: 0 10px 10px;
      font-size: 13px;
      color: #555;
      max-height: 100px;
      overflow-y: auto;
    }

    .comments-section p {
      margin-bottom: 4px;
    }

    .add-comment {
      border-top: 1px solid #eee;
      padding: 5px 10px;
      display: flex;
      align-items: center;
    }

    .add-comment input {
      border: none;
      flex-grow: 1;
      padding: 8px;
      font-size: 14px;
      outline: none;
    }

    .add-comment button {
      border: none;
      background: transparent;
      color: #0d6efd;
      font-weight: bold;
      cursor: pointer;
      padding: 0 10px;
    }

    .bottom-nav {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: white;
      border-top: 1px solid #ddd;
      display: flex;
      justify-content: space-around;
      padding: 10px 0;
      z-index: 1000;
    }

    .bottom-nav a {
      color: #333;
      text-decoration: none;
      text-align: center;
      font-size: 14px;
    }

    .bottom-nav a:hover {
      color: #0d6efd;
    }

    .btn-like, .btn-bookmark, .reaction-icon {
      transition: transform 0.2s ease;
    }

    .btn-like:active, .btn-bookmark:active, .reaction-icon:active {
      transform: scale(1.3);
    }






.status-badge {
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    font-size: 0.75rem;
    padding: 4px 8px;
    border-radius: 12px;
  }

  .online-badge {
    background-color: #28a745;
  }

  .offline-badge {
    background-color: #6c757d;
  }

  .profile-header {
    padding-top: 20px;
    position: relative;
  }


</style>
</head>
<body>

  <!-- Navbar -->
  <form class="d-flex" action="/search" method="GET">
    <input class="form-control me-2" type="search" name="q" placeholder="Search for users or posts" aria-label="Search" required>
    <button class="btn btn-outline-success" type="submit">Search</button>
  </form>

  <nav class="navbar navbar-expand-lg navbar-light">
    <div class="container">
      <div class="d-flex align-items-center gap-3">
        <a href="/posts/new" class="btn btn-outline-primary btn-sm">‚ûï New Post</a>
        <% if (currentUser) { %>
          
        <% } else { %>
          <a href="/auth/login" class="btn btn-outline-success btn-sm">Login</a>
        <% } %>
      </div>
    </div>
  </nav>

  <!-- Main content -->
 <!-- Main content -->
<div class="container mt-4">
  <% if (posts && posts.length > 0) { %>
    <% posts.forEach(post => { %>
      <div class="post-card" data-post-id="<%= post._id %>">
        <div class="post-header">
          <% if (post.user) { %>
            <a href="/users/<%= post.user._id %>">
              <img src="<%= post.user.avatar || '/default-avatar.png' %>" />
            </a>
            <strong><%= post.user.username %></strong>
          <% } else { %>
            <a href="#"><img src="/default-avatar.png" /></a>
            <strong>ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ</strong>
          <% } %>
        </div>

        <!-- ÿπÿ±ÿ∂ ÿßŸÑŸàÿ≥ÿßÿ¶ÿ∑ -->
        <% if (post.mediaType === 'image') { %>
          <img class="post-image" src="<%= post.media %>" alt="Post Image" />
        <% } else if (post.mediaType === 'video') { %>
          <video class="post-video" controls style="width: 100%; border-radius: 5px;">
            <source src="<%= post.media %>" type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        <% } %>

        <div class="post-actions">
          <div class="left-icons">
            <i class="bi <%= post.likes.includes(currentUser?._id) ? 'bi-heart-fill text-danger' : 'bi-heart' %> btn-like" title="Like" role="button"></i>
            <i class="bi bi-chat" title="Comment" role="button"></i>

            <% if (currentUser) { %>
              <i class="bi <%= currentUser.bookmarks.includes(post._id) ? 'bi-bookmark-fill text-primary' : 'bi-bookmark' %> btn-bookmark" data-post-id="<%= post._id %>"></i>
            <% } %>

            <div class="reaction-group">
              <i class="toggle-reactions bi bi-emoji-smile"></i>
              <div class="reactions-popup" style="display:none;">
                <i class="bi bi-heart-fill reaction-icon" data-type="heart"></i>
                <i class="bi bi-hand-thumbs-up-fill reaction-icon" data-type="clap"></i>
                <i class="bi bi-emoji-frown-fill reaction-icon" data-type="sad"></i>
              </div>
            </div>
          </div>
        </div>

        <div class="likes-count">
          <%= post.likes.length %> Likes
        </div>

        <div class="post-caption">
          <% if (post.user) { %>
            <strong><%= post.user.username %></strong> <%= post.caption %>
          <% } else { %>
            <strong>ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ</strong> <%= post.caption %>
          <% } %>
        </div>

        <div class="comments-section">
          <% post.comments.slice(0, 3).forEach(comment => { %>
            <% if (comment.user) { %>
              <p><strong><%= comment.user.username %>:</strong></p>
              <% if(comment.text && comment.text.trim().length > 0) { %>
                <p><%= comment.text %></p>
              <% } %>
              <% if(comment.image) { %>
                <img src="<%= comment.image %>" alt="Comment image" style="max-width: 100%; border-radius: 8px;" />
              <% } %>
              <% if(comment.video) { %>
                <video controls style="max-width: 100%; border-radius: 8px;">
                  <source src="<%= comment.video %>" type="video/mp4" />
                </video>
              <% } %>
            <% } else { %>
              <p><strong>ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ:</strong></p>
              <p><%= comment.text %></p>
              <% if(comment.image) { %>
                <img src="<%= comment.image %>" alt="Comment image" style="max-width: 100%; border-radius: 8px;" />
              <% } %>
              <% if(comment.video) { %>
                <video controls style="max-width: 100%; border-radius: 8px;">
                  <source src="<%= comment.video %>" type="video/mp4" />
                </video>
              <% } %>
            <% } %>
          <% }) %>

          <% if (post.comments.length > 3) { %>
            <button class="btn btn-link p-0 text-primary show-more-comments" data-post-id="<%= post._id %>">Show more comments</button>
          <% } %>
        </div>

        <form class="save-post-form" data-post-id="<%= post._id %>">
          <% if (currentUser && currentUser.savedPosts && currentUser.savedPosts.includes(post._id.toString())) { %>
            <button type="submit" class="save-btn saved">üóë Remove save</button>
          <% } else { %>
            <button type="submit" class="save-btn">üíæ Save</button>
          <% } %>
        </form>

        <% if (currentUser) { %>
          <form class="add-comment" data-post-id="<%= post._id %>">
            <input type="text" name="comment" placeholder="Add a comment..." autocomplete="off" required />
            <button type="submit">Post</button>
          </form>
        <% } else { %>
          <p class="text-center text-muted">Log in to comment</p>
        <% } %>
      </div>
    <% }) %>
  <% } else { %>
    <p class="text-center text-muted">No posts yet.</p>
  <% } %>
</div>

  <!-- Bottom nav -->
  <% if (currentUser) { %>
    <div class="bottom-nav d-lg-none">
      <a href="/"><i class="bi bi-house-door-fill"></i><br>Home</a>
      <a href="/posts/new"><i class="bi bi-plus-square-fill"></i><br>New</a>
      <a href="/users/<%= currentUser._id %>"><i class="bi bi-person-circle"></i><br>My Account</a>
    </div>
  <% } %>

  <!-- Bootstrap Script -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
  // When the services modal is closed, remove the backdrop
  $('#servicesModal').on('hidden.bs.modal', function () {
    $('.modal-backdrop').remove(); // This will remove the backdrop from the page
  });
</script>
  <script>
  document.querySelectorAll('.save-post-form').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const postId = form.getAttribute('data-post-id');
      const button = form.querySelector('button');
      const isSaved = button.classList.contains('saved');

      try {
        const response = await fetch(`/posts/${isSaved ? 'unsavePost' : 'savePost'}/${postId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const result = await response.json();

        if (response.ok) {
          if (isSaved) {
            button.classList.remove('saved');
            button.textContent = 'üíæ save';
          } else {
            button.classList.add('saved');
            button.textContent = 'üóë  Remove save';
          }
        } else {
          alert(result.message || 'An error occurred while saving.');
        }
      } catch (err) {
        console.error(err);
        alert('An error occurred while saving..');
      }
    });
  });
</script>
  <script>
    // Like button handler
    document.querySelectorAll('.btn-like').forEach(button => {
      button.addEventListener('click', async () => {
        const postCard = button.closest('.post-card');
        const postId = postCard.dataset.postId;

        try {
          const res = await fetch(`/posts/like/${postId}`, { method: 'POST' });
          const data = await res.json();

          if (data.liked) {
            button.classList.add('bi-heart-fill', 'text-danger');
            button.classList.remove('bi-heart');
          } else {
            button.classList.remove('bi-heart-fill', 'text-danger');
            button.classList.add('bi-heart');
          }

          // Update like count
          postCard.querySelector('.likes-count').textContent = data.likesCount + ' Likes';
        } catch (error) {
          alert('Log in to comment');
        }
      });
    });

   // Add comment handler
document.querySelectorAll('.add-comment').forEach(form => {
  form.addEventListener('submit', async e => {
    e.preventDefault();
    const postId = form.dataset.postId;

    // ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÇŸäŸÖ ŸÖŸÜ ÿßŸÑŸÅŸàÿ±ŸÖ
    const textInput = form.querySelector('input[name="text"]') || form.querySelector('textarea[name="text"]');
    const text = textInput ? textInput.value.trim() : '';

    const fileInput = form.querySelector('input[type="file"][name="media"]');
    const file = fileInput ? fileInput.files[0] : null;

    if (!text && !file) {
      alert('Please add text or media to comment.');
      return;
    }

    // ÿ®ŸÜÿßÿ° ÿ¨ÿ≥ŸÖ ÿßŸÑÿ∑ŸÑÿ® ÿ≠ÿ≥ÿ® Ÿàÿ¨ŸàÿØ ŸÖŸÑŸÅ ÿ£Ÿà ŸÑÿß (multipart/form-data)
    let formData;
    let fetchOptions;

    if (file) {
      formData = new FormData();
      if (text) formData.append('text', text);
      formData.append('media', file);

      fetchOptions = {
        method: 'POST',
        body: formData
      };
    } else {
      fetchOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text })
      };
    }

    try {
      const res = await fetch(`/posts/comment/${postId}`, fetchOptions);

      if (!res.ok) {
        const err = await res.json();
        alert(err.error || 'Error while adding comment');
        return;
      }

      const comments = await res.json();

      // ÿ™ÿ≠ÿØŸäÿ´ ŸÇÿ≥ŸÖ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ (ÿπÿ±ÿ∂ ÿ¢ÿÆÿ± 3 ŸÅŸÇÿ∑)
      const commentsSection = form.parentElement.querySelector('.comments-section');
      commentsSection.innerHTML = '';

      comments.slice(-3).forEach(comment => {
        let commentHTML = `<p><strong>${comment.user ? comment.user.username : 'ŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ'}:</strong></p>`;
        if (comment.text) commentHTML += `<p>${comment.text}</p>`;
        if (comment.image) commentHTML += `<img src="${comment.image}" alt="Comment image" style="max-width: 100%; border-radius: 8px; margin-bottom: 10px;" />`;
        if (comment.video) commentHTML += `
          <video controls style="max-width: 100%; border-radius: 8px; margin-bottom: 10px;">
            <source src="${comment.video}" type="video/mp4" />
            Your browser does not support the video tag.
          </video>`;
        commentsSection.innerHTML += commentHTML;
      });

      if (comments.length > 3) {
        commentsSection.innerHTML += `<button class="btn btn-link p-0 text-primary show-more-comments" data-post-id="${postId}">Show more comments</button>`;
      }

      // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑÿ≠ŸÇŸàŸÑ
      if (textInput) textInput.value = '';
      if (fileInput) fileInput.value = '';
    } catch (error) {
      alert('Log in to comment');
      console.error(error);
    }
  });
});


    // Example for saving post (bookmark)
    document.querySelectorAll('.btn-bookmark').forEach(button => {
      button.addEventListener('click', async () => {
        const postId = button.dataset.postId;

        try {
          const res = await fetch(`/posts/bookmark/${postId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
          });

          const data = await res.json();

          if (data.bookmarked) {
            button.classList.remove('bi-bookmark');
            button.classList.add('bi-bookmark-fill', 'text-primary');
          } else {
            button.classList.remove('bi-bookmark-fill', 'text-primary');
            button.classList.add('bi-bookmark');
          }
        } catch (err) {
          console.error('Bookmark error:', err);
          alert('Log in to comment');
        }
      });
    });
    
    // Handling reactions
    document.querySelectorAll('.toggle-reactions').forEach(btn => {
      btn.addEventListener('mouseover', () => btn.nextElementSibling.style.display = 'flex');
      btn.nextElementSibling.addEventListener('mouseleave', e => e.currentTarget.style.display = 'none');
    });
    document.querySelectorAll('.reaction-icon').forEach(icon => {
      icon.addEventListener('click', async () => {
        const postId = icon.closest('.post-card').dataset.postId;
        const type = icon.dataset.type;
        await fetch(`/posts/react/${postId}`, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ type })
        });
        icon.closest('.reactions-popup').style.display = 'none';
      });
    });

    // Handling swipe actions
    document.querySelectorAll('.post-card').forEach(card => {
      let startX;
      card.addEventListener('touchstart', e => startX = e.touches[0].clientX);
      card.addEventListener('touchend', e => {
        const dx = e.changedTouches[0].clientX - startX;
        if (dx > 100) {
          card.querySelector('.btn-bookmark').click();
        } else if (dx < -100) {
          card.querySelector('.btn-like').click();
        }
      });
    });




    // ÿßŸÑÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™
document.querySelectorAll('.show-more-comments').forEach(button => {
  button.addEventListener('click', async function() {
    const postId = button.getAttribute('data-post-id');

    // ÿ•ÿÆŸÅÿßÿ° "ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≤ŸäÿØ" Ÿàÿπÿ±ÿ∂ ÿßŸÑŸÜÿµ "ÿπÿ±ÿ∂ ÿ£ŸÇŸÑ"
    button.textContent = 'Show less comments';
    button.classList.add('show-less-comments');
    button.classList.remove('show-more-comments');

    try {
      // ÿ¨ŸÑÿ® ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑŸÖÿ™ÿ®ŸÇŸäÿ© ŸÖŸÜ ÿßŸÑÿÆÿßÿØŸÖ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ AJAX
      const res = await fetch(`/posts/comments/${postId}?page=2`);
      const comments = await res.json();

      const commentsSection = button.closest('.comments-section');

      // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿµŸÅÿ≠ÿ©
      comments.forEach(comment => {
        const commentElement = document.createElement('p');
        commentElement.innerHTML = `<strong>${comment.user.username}:</strong> ${comment.text}`;
        commentsSection.insertBefore(commentElement, button);
      });
    } catch (error) {
      console.error('Error fetching comments:', error);
    }
  });
});

// ÿßŸÑÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿπÿ±ÿ∂ ÿ£ŸÇŸÑ ŸÖŸÜ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™
document.querySelectorAll('.show-less-comments').forEach(button => {
  button.addEventListener('click', function() {
    const postId = button.getAttribute('data-post-id');

    // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ© Ÿàÿ•ÿ∏Ÿáÿßÿ± ÿßŸÑŸÜÿµ "ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≤ŸäÿØ"
    const commentsSection = button.closest('.comments-section');
    const allComments = commentsSection.querySelectorAll('p');
    const visibleComments = Array.from(allComments).slice(0, 3);

    // ÿ•ÿÆŸÅÿßÿ° ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑŸÖÿ™ÿ®ŸÇŸäÿ©
    for (let i = 3; i < allComments.length; i++) {
      allComments[i].style.display = 'none';
    }

    button.textContent = 'Show more comments';
    button.classList.add('show-more-comments');
    button.classList.remove('show-less-comments');

    // ÿπÿ±ÿ∂ ÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßŸÑÿ£ÿµŸÑŸäÿ© (ÿ®ÿØÿßŸäÿ© ŸÖŸÜ 3 ŸÅŸÇÿ∑)
    visibleComments.forEach(comment => {
      comment.style.display = 'block';
    });
  });
});

  </script>
  <style>
    footer {
  background-color: #343a40;
  color: white;
  padding: 10px 0;
  text-align: center;
}

footer strong {
  color: #007bff;
}

  </style>
<footer>
  <p>Powered by <strong><a href="/contact">Basem Halaika</a></strong></p>
</footer>




</body>
</html>
















