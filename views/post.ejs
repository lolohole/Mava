<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="UTF-8">
  <% layout = false %>
  <title>Post by <%= post.user.username %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body { background: #fafafa; font-family: Arial, sans-serif; padding-bottom: 70px; }
    .post-container { max-width: 600px; margin: 30px auto; background: white; border: 1px solid #ddd; border-radius: 10px; }
    .post-header, .post-footer { padding: 10px; display: flex; align-items: center; }
    .post-header img { width: 40px; height: 40px; border-radius: 50%; margin-right: 10px; }
    .post-image, .post-video { width: 100%; height: auto; border-bottom: 1px solid #eee; }
    .btn-like, .btn-comment, .btn-bookmark { cursor: pointer; font-size: 20px; margin-right: 10px; }
    .stats { font-size: 14px; margin: 10px; font-weight: bold; }
    canvas { max-width: 100%; display: block; margin: 20px auto; }

    .save-btn {
      background-color: #eee;
      border: none;
      padding: 6px 12px;
      cursor: pointer;
      border-radius: 4px;
    }

    .save-btn.saved {
      background-color: #28a745;
      color: white;
    }
  </style>
</head>
<body>

<div class="post-container">
  <div class="post-header">
    <a href="/users/<%= post.user._id %>">
      <img src="<%= post.user.avatar || '/default-avatar.png' %>" alt="avatar">
    </a>
    <strong><%= post.user.username %></strong>
  </div>

  <% if (post.mediaType === 'image') { %>
    <img src="<%= post.media %>" class="post-image" alt="Post Image">
  <% } else if (post.mediaType === 'video') { %>
    <video class="post-video" controls>
      <source src="<%= post.media %>" type="video/mp4">
      متصفحك لا يدعم تشغيل الفيديو.
    </video>
  <% } %>

  <div class="post-footer">
    <div class="d-flex align-items-center">
      <i class="bi <%= post.likes.includes(currentUser?._id) ? 'bi-heart-fill text-danger' : 'bi-heart' %> btn-like"></i>
      <i class="bi bi-chat btn-comment"></i>
      <% if (currentUser) { %>
        <i class="bi <%= currentUser.bookmarks.includes(post._id) ? 'bi-bookmark-fill text-primary' : 'bi-bookmark' %> btn-bookmark"></i>
      <% } %>
    </div>
  </div>

  <div class="stats">
    <span><%= post.likes.length %> Likes</span> |
    <span><%= post.comments.length %> Comments</span>
    <form class="save-post-form" data-post-id="<%= post._id %>">
      <% if (currentUser && currentUser.savedPosts && currentUser.savedPosts.includes(post._id.toString())) { %>
        <button type="submit" class="save-btn saved">🗑 Remove Saved</button>
      <% } else { %>
        <button type="submit" class="save-btn">💾 Save</button>
      <% } %>
    </form>
  </div>

  <div class="px-3 pb-3">
    <strong><%= post.user.username %></strong> <%= post.caption %>
  </div>

  <div class="px-3 pb-3">
    <% post.comments.forEach(c => { %>
<p><strong><%= c.user.username %>:</strong> <%= c.text %></p>
<% }) %>

</div>
<% if (currentUser) { %>
<form class="px-3 pb-3" id="comment-form">
<div class="input-group">
<input type="text" name="text" class="form-control" placeholder="Add a comment..." required>
<button class="btn btn-primary" type="submit">Post</button>
</div>
</form>
<% } else { %>
<p class="text-center text-muted pb-3">Login to comment.</p>
<% } %>

<% if (currentUser && currentUser._id.toString() === post.user._id.toString()) { %>
<canvas id="analytics-chart" height="150"></canvas>
<% } %>

</div> <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> <script src="/socket.io/socket.io.js"></script> <script> document.querySelectorAll('.save-post-form').forEach(form => { form.addEventListener('submit', async (e) => { e.preventDefault(); const postId = form.getAttribute('data-post-id'); const button = form.querySelector('button'); const isSaved = button.classList.contains('saved'); try { const response = await fetch(`/posts/${isSaved ? 'unsavePost' : 'savePost'}/${postId}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } }); const result = await response.json(); if (response.ok) { if (isSaved) { button.classList.remove('saved'); button.textContent = '💾 Save'; } else { button.classList.add('saved'); button.textContent = '🗑 Remove Saved'; } } else { alert(result.message || 'An error occurred while saving.'); } } catch (err) { console.error(err); alert('Unexpected error occurred.'); } }); }); const socket = io(); <% if (currentUser) { %> socket.emit('register', '<%= currentUser._id %>'); socket.on('newNotification', data => alert(data.message)); <% } %> document.querySelector('.btn-like').addEventListener('click', async () => { const res = await fetch('/posts/like/<%= post._id %>', { method: 'POST' }); const data = await res.json(); location.reload(); }); <% if (currentUser) { %> document.querySelector('.btn-bookmark').addEventListener('click', async () => { await fetch('/posts/bookmark/<%= post._id %>', { method: 'POST' }); location.reload(); }); document.getElementById('comment-form').addEventListener('submit', async e => { e.preventDefault(); const text = e.target.text.value.trim(); if (!text) return; await fetch('/posts/comment/<%= post._id %>', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({ text }) }); location.reload(); }); <% } %> <% if (currentUser && currentUser._id.toString() === post.user._id.toString()) { %> const ctx = document.getElementById('analytics-chart').getContext('2d'); new Chart(ctx, { type: 'doughnut', data: { labels: ['Likes', 'Comments'], datasets: [{ data: [<%= post.likes.length %>, <%= post.comments.length %>], backgroundColor: ['#dc3545', '#0d6efd'] }] }, options: { responsive: true, plugins: { legend: { position: 'bottom' } } } }); <% } %> </script> </body> </html> 
<script>
  // حفظ/إزالة الحفظ (Save/Unsave) المنشور
  document.querySelectorAll('.save-post-form').forEach(form => {
    form.addEventListener('submit', async e => {
      e.preventDefault();
      const postId = form.getAttribute('data-post-id');
      const button = form.querySelector('button');
      const isSaved = button.classList.contains('saved');

      try {
        const response = await fetch(`/posts/${isSaved ? 'unsavePost' : 'savePost'}/${postId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        const result = await response.json();

        if (response.ok) {
          if (isSaved) {
            button.classList.remove('saved');
            button.textContent = '💾 Save';
          } else {
            button.classList.add('saved');
            button.textContent = '🗑 Remove Saved';
          }
        } else {
          alert(result.message || JSON.stringify(result));
        }
      } catch (error) {
        console.error(error);
        alert('Unexpected error occurred.');
      }
    });
  });

  // زر اللايك
  const likeBtn = document.querySelector('.btn-like');
  if (likeBtn) {
    likeBtn.addEventListener('click', async () => {
      try {
        const res = await fetch(`/posts/like/<%= post._id %>`, { method: 'POST' });
        const data = await res.json();
        if (res.ok) {
          location.reload(); // يمكنك تحسينها لتحديث عدد اللايكات فقط بدون إعادة تحميل
        } else {
          alert(data.message || JSON.stringify(data));
        }
      } catch (err) {
        console.error(err);
        alert('Failed to like the post.');
      }
    });
  }

  // زر الحفظ/الإشارة المرجعية Bookmark
  const bookmarkBtn = document.querySelector('.btn-bookmark');
  if (bookmarkBtn) {
    bookmarkBtn.addEventListener('click', async () => {
      try {
        await fetch(`/posts/bookmark/<%= post._id %>`, { method: 'POST' });
        location.reload();
      } catch (err) {
        console.error(err);
        alert('Failed to toggle bookmark.');
      }
    });
  }

  // إضافة تعليق (Comment)
  const commentForm = document.getElementById('comment-form');
  if (commentForm) {
    commentForm.addEventListener('submit', async e => {
      e.preventDefault();
      const textInput = commentForm.querySelector('input[name="text"]');
      const text = textInput.value.trim();
      if (!text) return;

      try {
        const response = await fetch(`/posts/comment/<%= post._id %>`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text })
        });
        const result = await response.json();
        if (response.ok) {
          textInput.value = '';
          location.reload(); // يمكن تحسينها بعرض التعليق الجديد دون تحميل الصفحة
        } else {
          alert(result.message || JSON.stringify(result));
        }
      } catch (err) {
        console.error(err);
        alert('Failed to add comment.');
      }
    });
  }
</script>
