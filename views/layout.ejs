<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title><%= title || "Mava" %></title>

  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

  <!-- Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
    <link rel="manifest" href="/manifest.json">


    <link rel="stylesheet" href="/css/theme.css">
<script>
  window.addEventListener('DOMContentLoaded', () => {
    const t = <%- JSON.stringify(currentUser?.themeSettings || {}) %>;
    if (Object.keys(t).length) {
      for (const k in t) {
        document.documentElement.style.setProperty('--' + k.replace(/([A-Z])/g, '-$1').toLowerCase(), t[k]);
      }
    }
  });
</script>
<script>
    window.addEventListener('DOMContentLoaded', () => {
      const t = <%- JSON.stringify(currentUser?.themeSettings || {}) %>;
      if (Object.keys(t).length) {
        for (const k in t) {
          document.documentElement.style.setProperty(
            '--' + k.replace(/([A-Z])/g, '-$1').toLowerCase(),
            t[k]
          );
        }
      }
    });
  </script>

  <!-- Custom Styles -->
  <style>
    body {
      padding-bottom: 80px;
      background-color: #f8f9fa;
      font-family: 'Arial', sans-serif;
      margin-top: 80px; /* Create space below the navbar */
    }
    
    /* Navbar customizations */
    .navbar {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .navbar img {
      border-radius: 50%;
      object-fit: cover;
    }

    /* Content space under navbar */
    main {
      padding-top: 80px;
    }

    /* Bottom navbar for mobile */
    .bottom-nav {
      position: fixed;
      bottom: 0;
      width: 100%;
      background: white;
      border-top: 1px solid #ddd;
      display: flex;
      justify-content: space-around;
      padding: 10px 0;
      z-index: 1000;
      box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.1);
    }

    .bottom-nav a {
      color: #333;
      text-decoration: none;
      text-align: center;
      font-size: 14px;
    }

    .bottom-nav a:hover {
      color: #0d6efd;
    }

    /* Canvas customizations */
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      opacity: 0.1;
      pointer-events: none;
    }


  .status-badge {
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    font-size: 0.75rem;
    padding: 4px 8px;
    border-radius: 12px;
  }

  .online-badge {
    background-color: #28a745;
  }

  .offline-badge {
    background-color: #6c757d;
  }

  .profile-header {
    padding-top: 20px;
    position: relative;
  }

  






    .dark-mode {
  background-color: #121212;
  color: #f1f1f1;
}

.dark-mode .card {
  background-color: #1e1e1e;
  color: #ddd;
}

.dark-mode .btn {
  background-color: #333;
  color: #fff;
}

.dark-mode a {
  color: #90caf9;
}












canvas#bgCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: -1;
      opacity: 0.3;
      pointer-events: none;
      display: block;
    }

  </style>

  <link rel="stylesheet" href="/css/style.css">

</head>
<body data-userid="<%= currentUser?._id %>"   class="<%= currentUser && currentUser.isDarkMode ? 'dark-mode' : '' %>">
<canvas id="bgCanvas"></canvas>


  
  <!-- üîù Fixed Navbar -->
  <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm">
    <div class="container">
      <a class="navbar-brand fw-bold" href="/">üì∏ Mava</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
        <ul class="navbar-nav gap-3 align-items-center">
          <% if (currentUser) { %>
            <li class="nav-item">
              <a class="nav-link" href="/">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/posts/new">‚ûï New Post</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/conversations">üí¨ Messages</a>
            </li>
            <li class="nav-item">
              <a class="nav-link d-flex align-items-center gap-2" href="/users/<%= currentUser._id %>">
                <img src="<%= currentUser.avatar || '/default-avatar.png' %>" width="30" height="30" />
                <span><%= currentUser.username %></span>
              </a>
            </li>
            <a href="/notifications" id="notificationIcon" class="position-relative">
              üîî
              <span id="notificationBadge" class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="display:none">0</span>
            </a>
            <a href="/posts/saved" class="btn btn-outline-primary btn-sm mt-2">
  üìå Saved Posts
</a>


           

            <li class="nav-item">
              <form action="/auth/logout" method="POST" class="d-inline">
                <button type="submit" class="btn btn-link nav-link">üö™ Logout</button>
              </form>
            </li>
          <% } else { %>
            <li class="nav-item">
              <a class="nav-link" href="/auth/login">Login</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/auth/register">Sign Up</a>
            </li>
<a href="https://drive.google.com/uc?export=download&id=1u1fNDPtr-flCdTH6rzy4XYuNwFa3iCks" download style="text-decoration: none;">
  <div style="
      display: inline-flex;
      align-items: center;
      background-color: #4CAF50;
      color: white;
      padding: 10px 18px;
      border-radius: 8px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;">
    <img src="https://img.icons8.com/ios-filled/24/ffffff/android-os.png" 
         alt="Android" style="margin-right: 10px;" />
    Download Android App
  </div>
</a>


          <% } %>
        </ul>
      </div>
    </div>
  </nav>

  <!-- ‚úÖ Main Content Area -->
  <main class="container py-4">
    <%- body %>
  </main>

  <!-- üîΩ Bottom Navbar for Mobile -->
  <% if (currentUser) { %>
    <div class="bottom-nav d-lg-none">
      <a href="/"><i class="bi bi-house-door-fill"></i><br>Home</a>
      <a href="/posts/new"><i class="bi bi-plus-square-fill"></i><br>New</a>
      <a href="/inpox"><i class="bi bi-chat-dots-fill"></i><br>Messages</a>
      <a href="/users/<%= currentUser._id %>"><i class="bi bi-person-circle"></i><br>Profile</a>
    </div>
  <% } %>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Socket.IO -->
  <script>
    const socket = io();
    <% if (currentUser) { %>
      socket.emit('register', '<%= currentUser._id %>');
    <% } %>
  </script>

  <!-- Pass User Token -->
  <script>const USER_TOKEN = '<%= token || "" %>';</script>

  <!-- Custom Chat JS -->
  <script src="/js/chat.js"></script>

  <!-- Canvas Code -->
  

  <!-- Google Translate (optional for translation) -->
  <script type="text/javascript">
    function googleTranslateElementInit() {
      new google.translate.TranslateElement({
        pageLanguage: 'en',
        includedLanguages: 'en,ar', // Add other languages here
        layout: google.translate.TranslateElement.InlineLayout.SIMPLE
      }, 'google_translate_element');
    }
  </script>
  <script type="text
  <!-- Google Translate (optional for translation) -->
  <script type="text/javascript">
    function googleTranslateElementInit() {
      new google.translate.TranslateElement({
        pageLanguage: 'en',
        includedLanguages: 'en,ar', // Add other languages here if needed
        layout: google.translate.TranslateElement.InlineLayout.SIMPLE
      }, 'google_translate_element');
    }
  </script>
  <script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script>

  <!-- Optionally, add a div for the Google Translate widget -->
  <div id="google_translate_element" style="position: fixed; bottom: 10px; left: 10px;"></div>

  <!-- Custom JavaScript -->
  <script src="/public/js/main.js"></script>
  
   <script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js')
      .then(reg => console.log('‚úÖ Service Worker Registered:', reg.scope))
      .catch(err => console.error('‚ùå Service Worker Error:', err));
  }
</script>
<script>
  // When the services modal is closed, remove the backdrop
  $('#servicesModal').on('hidden.bs.modal', function () {
    $('.modal-backdrop').remove(); // This will remove the backdrop from the page
  });
</script>




























<script>//canves</script>

<canvas id="bgCanvas"></canvas>

<script>
  const canvas = document.getElementById('bgCanvas');
  const ctx = canvas.getContext('2d');

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }
  resizeCanvas();
  window.addEventListener('resize', resizeCanvas);

  let animationFrameId;

  // ÿØŸàÿßŸÑ ÿßŸÑÿÆŸÑŸÅŸäÿßÿ™
  function startParticlesBackground() {
    const particles = [];
    for (let i = 0; i < 200; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: Math.random() * 3 + 1,
        speedX: Math.random() * 2 - 1,
        speedY: Math.random() * 2 - 1,
        color: 'rgba(72, 88, 235, 0.5)',
      });
    }

    function update() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      particles.forEach((p, i) => {
        p.x += p.speedX;
        p.y += p.speedY;
        if (
          p.x < 0 ||
          p.x > canvas.width ||
          p.y < 0 ||
          p.y > canvas.height
        ) {
          particles[i] = {
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: Math.random() * 3 + 1,
            speedX: Math.random() * 2 - 1,
            speedY: Math.random() * 2 - 1,
            color: 'rgba(72, 88, 235, 0.5)',
          };
        }
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
        ctx.fillStyle = p.color;
        ctx.fill();
      });
      animationFrameId = requestAnimationFrame(update);
    }
    update();
  }

  function startStarsBackground() {
    const stars = Array.from({ length: 150 }, () => ({
      x: Math.random() * canvas.width,
      y: Math.random() * canvas.height,
      size: Math.random() * 1.5,
      speed: Math.random() * 0.5 + 0.2,
    }));

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#ffffff';
      stars.forEach((s) => {
        ctx.beginPath();
        ctx.arc(s.x, s.y, s.size, 0, Math.PI * 2);
        ctx.fill();
        s.y += s.speed;
        if (s.y > canvas.height) s.y = 0;
      });
      animationFrameId = requestAnimationFrame(draw);
    }
    draw();
  }

  function startWavesBackground() {
    let t = 0;

    function draw() {
      t += 0.02;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.strokeStyle = '#6c63ff';
      ctx.lineWidth = 2;
      for (let i = 0; i < 3; i++) {
        ctx.beginPath();
        for (let x = 0; x < canvas.width; x += 10) {
          const y =
            canvas.height / 2 + Math.sin(x * 0.02 + t + i) * 50;
          ctx.lineTo(x, y);
        }
        ctx.stroke();
      }
      animationFrameId = requestAnimationFrame(draw);
    }
    draw();
  }

  function startMatrixBackground() {
    const cols = 50;
    const size = canvas.width / cols;
    const drops = Array(cols).fill(0);

    function draw() {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = '#0F0';
      ctx.font = size + 'px monospace';
      drops.forEach((y, i) => {
        const text = String.fromCharCode(
          0x30a0 + Math.random() * 96
        );
        ctx.fillText(text, i * size, y * size);
        if (y * size > canvas.height && Math.random() > 0.975)
          drops[i] = 0;
        drops[i]++;
      });
      animationFrameId = requestAnimationFrame(draw);
    }
    draw();
  }

  function startBubblesBackground() {
    const bubbles = Array.from({ length: 80 }, () => ({
      x: Math.random() * canvas.width,
      y: canvas.height + Math.random() * 100,
      r: Math.random() * 20 + 10,
      dy: Math.random() * -1.5 - 0.5,
    }));

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      bubbles.forEach((b) => {
        ctx.beginPath();
        ctx.arc(b.x, b.y, b.r, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(173, 216, 230, 0.5)';
        ctx.fill();
        b.y += b.dy;
        if (b.y + b.r < 0) {
          b.y = canvas.height + b.r;
          b.x = Math.random() * canvas.width;
        }
      });
      animationFrameId = requestAnimationFrame(draw);
    }
    draw();
  }

  function startOrbitingCircles() {
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  const circles = Array.from({ length: 8 }, (_, i) => ({
    angle: (i / 8) * 2 * Math.PI,
    radius: 100 + Math.random() * 50,
    size: 8,
    speed: 0.01 + Math.random() * 0.02,
    color: `hsl(${Math.random() * 360}, 70%, 60%)`,
  }));

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    circles.forEach((c) => {
      c.angle += c.speed;
      const x = centerX + Math.cos(c.angle) * c.radius;
      const y = centerY + Math.sin(c.angle) * c.radius;

      ctx.beginPath();
      ctx.arc(x, y, c.size, 0, 2 * Math.PI);
      ctx.fillStyle = c.color;
      ctx.fill();
    });
    animationFrameId = requestAnimationFrame(draw);
  }
  draw();
}


  function startAnimatedGrid() {
  const gridSize = 50;
  let offset = 0;

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = '#4caf50';
    ctx.lineWidth = 1;
    offset += 0.5;

    for (let x = 0; x < canvas.width; x += gridSize) {
      ctx.beginPath();
      ctx.moveTo(x + offset % gridSize, 0);
      ctx.lineTo(x + offset % gridSize, canvas.height);
      ctx.stroke();
    }
    for (let y = 0; y < canvas.height; y += gridSize) {
      ctx.beginPath();
      ctx.moveTo(0, y + offset % gridSize);
      ctx.lineTo(canvas.width, y + offset % gridSize);
      ctx.stroke();
    }

    animationFrameId = requestAnimationFrame(draw);
  }
  draw();
}

function startPulseWaves() {
  let t = 0;
  function draw() {
    t += 0.05;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = '#ff4081';
    ctx.lineWidth = 3;

    for (let i = 0; i < 4; i++) {
      ctx.beginPath();
      for (let x = 0; x < canvas.width; x += 5) {
        const y =
          canvas.height / 2 +
          Math.sin(x * 0.05 + t + i * 1.5) *
            (30 + 20 * Math.sin(t * 2 + i));
        ctx.lineTo(x, y);
      }
      ctx.stroke();
    }

    animationFrameId = requestAnimationFrame(draw);
  }
  draw();
}


function startTwinklingCircles() {
  const circles = Array.from({ length: 100 }, () => ({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    r: Math.random() * 3 + 1,
    alpha: Math.random(),
    delta: Math.random() * 0.02 + 0.01,
  }));

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    circles.forEach((c) => {
      c.alpha += c.delta;
      if (c.alpha >= 1 || c.alpha <= 0) c.delta *= -1;

      ctx.beginPath();
      ctx.arc(c.x, c.y, c.r, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(255, 255, 255, ${c.alpha})`;
      ctx.fill();
    });
    animationFrameId = requestAnimationFrame(draw);
  }
  draw();
}



function startMovingLines() {
  const lines = Array.from({ length: 30 }, () => ({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    length: 50 + Math.random() * 100,
    speed: 1 + Math.random() * 2,
  }));

  function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = '#00bcd4';
    ctx.lineWidth = 2;

    lines.forEach((line) => {
      ctx.beginPath();
      ctx.moveTo(line.x, line.y);
      ctx.lineTo(line.x, line.y - line.length);
      ctx.stroke();

      line.y -= line.speed;
      if (line.y + line.length < 0) line.y = canvas.height + line.length;
    });

    animationFrameId = requestAnimationFrame(draw);
  }
  draw();
}




  // ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ£ŸÜŸäŸÖŸäÿ¥ŸÜ ÿßŸÑÿ≥ÿßÿ®ŸÇ
  function clearAnimation() {
    if (animationFrameId) {
      cancelAnimationFrame(animationFrameId);
      animationFrameId = null;
    }
  }

  // ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿØÿßŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© ŸÑŸÑÿ•ŸÑÿ∫ÿßÿ° ÿ®ŸäŸÜ ÿßŸÑÿ™ÿ®ÿØŸäŸÑ
  let currentAnimationStopper = null;

  // ŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ£ŸÜŸäŸÖŸäÿ¥ŸÜ ŸàÿßŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿØÿßŸÑÿ© ÿßŸÑÿ•ŸäŸÇÿßŸÅ (ŸÑŸà ŸÖÿ™ŸàŸÅÿ±ÿ©)
  function runAnimation(type) {
  clearAnimation();
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  switch (type) {
    case 'particles':
      startParticlesBackground();
      break;
    case 'stars':
      startStarsBackground();
      break;
    case 'waves':
      startWavesBackground();
      break;
    case 'matrix':
      startMatrixBackground();
      break;
    case 'bubbles':
      startBubblesBackground();
      break;
    case 'orbitingCircles':
      startOrbitingCircles();
      break;
    case 'animatedGrid':
      startAnimatedGrid();
      break;
    case 'pulseWaves':
      startPulseWaves();
      break;
    case 'twinklingCircles':
      startTwinklingCircles();
      break;
    case 'movingLines':
      startMovingLines();
      break;
    default:
      startParticlesBackground();
  }
}


  // ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸÜŸäŸÖŸäÿ¥ŸÜÿßÿ™
  const animations = [
  'particles',
  'stars',
  'waves',
  'matrix',
  'bubbles',
  'orbitingCircles',
  'animatedGrid',
  'pulseWaves',
  'twinklingCircles',
  'movingLines'
];

  // ÿßÿÆÿ™Ÿäÿßÿ± ÿπÿ¥Ÿàÿßÿ¶Ÿä
  function randomAnimation() {
    const idx = Math.floor(Math.random() * animations.length);
    return animations[idx];
  }

  // ÿ™ÿ®ÿØŸäŸÑ ÿßŸÑÿ£ŸÜŸäŸÖŸäÿ¥ŸÜ ŸÉŸÑ ŸÅÿ™ÿ±ÿ© (ŸÖÿ´ŸÑÿßŸã 10 ÿ´ŸàÿßŸÜŸä)
  function cycleAnimations() {
    const anim = randomAnimation();
    runAnimation(anim);
  }

  cycleAnimations(); // ÿ®ÿØÿ° ŸÅŸàÿ±Ÿãÿß
  setInterval(cycleAnimations, 10000); // ŸÉŸÑ 10 ÿ´ŸàÿßŸÜŸä Ÿäÿ™ÿ∫Ÿäÿ±

</script>

</body>
</html>
