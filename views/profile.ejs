<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
  <meta charset="UTF-8" />
  <title><%= profileUser.username %> - Profile</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<script>
    window.addEventListener('DOMContentLoaded', () => {
      const t = <%- JSON.stringify(currentUser?.themeSettings || {}) %>;
      if (Object.keys(t).length) {
        for (const k in t) {
          document.documentElement.style.setProperty(
            '--' + k.replace(/([A-Z])/g, '-$1').toLowerCase(),
            t[k]
          );
        }
      }
    });
  </script>
<style>
  :root {
  --post-bg-color: #ffffff;
  --post-text-color: #ffffff;
  --chat-bg-color: #ffffff;
  --chat-text-color: #000000;
  --notification-color: #ffeb3b;
  --saved-posts-bg-color: #e0e0e0;
}

/* ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ£ŸÑŸàÿßŸÜ */
.post-card {
  background-color: var(--post-bg-color);
  color: var(--post-text-color);
}

.chat-box {
  background-color: var(--chat-bg-color);
  color: var(--chat-text-color);
}

.notification {
  background-color: var(--notification-color);
}

.saved-post {
  background-color: var(--saved-posts-bg-color);
}



  
  body {
      background-color: #fafafa;
      font-family: 'Arial', sans-serif;
      padding-bottom: 70px;
    }
    .profile-header {
      text-align: center;
      margin: 30px 0;
    }
    .profile-header img {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }
    .profile-header img:hover {
      transform: scale(1.05);
    }
    .chat-btn {
      display: inline-block;
      margin-top: 10px;
      padding: 8px 16px;
      background-color: #0d6efd;
      color: white;
      border-radius: 20px;
      text-decoration: none;
      font-size: 14px;
      transition: background-color 0.3s;
    }
    .chat-btn:hover {
      background-color: #084298;
      color: white;
    }
    .action-buttons {
      margin-top: 20px;
      display: flex;
      justify-content: center;
      gap: 20px;
      flex-wrap: wrap;
    }
    .action-buttons button, .action-buttons a {
      transition: transform 0.3s ease, background-color 0.3s ease;
    }
    .action-buttons button:hover, .action-buttons a:hover {
      transform: scale(1.05);
      background-color: #0056b3;
    }
    .post-card {
      transition: transform 0.3s ease;
      cursor: pointer;
    }
    .post-card:hover {
      transform: scale(1.05);
    }
    .post-image {
      height: 200px;
      object-fit: cover;
    }
    .modal-footer button {
      transition: background-color 0.3s ease;
    }
    .modal-footer button:hover {
      background-color: #0056b3;
    }
    .text-center .btn-info {
      background-color: #17a2b8;
      color: white;
      border-radius: 30px;
      padding: 10px 20px;
      font-size: 16px;
    }
    .text-center .btn-info:hover {
      background-color: #138496;
    }




    /* Style for profile links section */
.profile-links {
  display: flex;
  justify-content: center;
  gap: 20px; /* Add some spacing between the buttons */
  margin-top: 30px;
}

.profile-links .btn {
  padding: 12px 30px;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
  text-decoration: none;
  border-radius: 25px; /* Rounded corners */
  border: none;
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
}

.profile-links .btn-primary {
  background-color: #007bff; /* Blue color */
  color: white;
}

.profile-links .btn-primary:hover {
  background-color: #0056b3; /* Darker blue on hover */
}

.profile-links .btn-secondary {
  background-color: #28a745; /* Green color */
  color: white;
}

.profile-links .btn-secondary:hover {
  background-color: #218838; /* Darker green on hover */
}

/* Optional: Add a little bit of spacing for mobile devices */
@media (max-width: 768px) {
  .profile-links {
    flex-direction: column;
    align-items: center;
  }

  .profile-links .btn {
    width: 80%;
    margin-bottom: 15px;
  }









  


  
  .status-badge {
    background-color: rgba(0, 0, 0, 0.6);
    color: white;
    font-size: 0.75rem;
    padding: 4px 8px;
    border-radius: 12px;
  }

  .online-badge {
    background-color: #28a745;
  }

  .offline-badge {
    background-color: #6c757d;
  }

  .profile-header {
    padding-top: 20px;
    position: relative;
  }


}

  </style>
<style>
    

    
  </style>
</head>
<body >

<canvas id="canvas0"></canvas>
  <canvas id="canvas1"></canvas>
  <canvas id="canvas2"></canvas>
  <canvas id="canvas3"></canvas>
  <canvas id="canvas4"></canvas>
  <canvas id="canvas5"></canvas>
  <canvas id="canvas6"></canvas>
  <canvas id="canvas7"></canvas>
  <canvas id="canvas8"></canvas>



  
   <div class="profile-header position-relative mb-4">

  <% if (profileUser.isOnline) { %>
    <span class="status-badge online-badge position-absolute top-0 end-0 me-2 mt-2">üü¢ Online</span>
  <% } else { %>
    <span class="status-badge offline-badge position-absolute top-0 end-0 me-2 mt-2">
      üîò Last seen: <%= new Date(profileUser.lastSeen).toLocaleString() %>
    </span>
  <% } %>
</div>
   




<div class="container" >
  <div class="profile-header text-center">
    <img src="<%= profileUser.avatar || '/default-avatar.png' %>" alt="Avatar" class="rounded-circle mb-2" style="width: 120px; height: 120px; object-fit: cover;">
  <% if (profileUser.isVerified) { %>
    <span class="verified">‚úîÔ∏è</span>
  <% } %>
</h1>
   

    <h2><%= profileUser.username %></h2>

    <% if (profileUser.isVerified) { %>
      <span class="badge bg-primary">‚úîÔ∏è  Verified account</span>
    <% } %>

    <div class="mt-2" >
      <span><%= posts.length %> Post  </span><br> 
      <span> Followers <span id="followersCount"><%= profileUser.followers.length %></span></span> 
      <span>Following<%= profileUser.following.length %> </span>
    </div>

    <div class="action-buttons mt-3">
      <% if (currentUser && currentUser._id.toString() !== profileUser._id.toString()) { %>
        <!-- ÿ≤ÿ± ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ© ÿ£Ÿà ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ© -->
        <form id="followForm" method="POST" data-userid="<%= profileUser._id %>">
          <button type="submit" id="followButton" class="btn btn-sm <%= currentUser.following.includes(profileUser._id) ? 'btn-outline-danger' : 'btn-outline-primary' %>">
            <%= currentUser.following.includes(profileUser._id) ? ' Unfollow' : 'Follow ' %>
          </button>
        </form>
       
        <!-- ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ŸÅÿßÿπŸÑ -->
        <a href="/chat/<%= profileUser._id %>" class="btn btn-sm btn-secondary">üí¨ Chat</a>
        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#requestModal">üì•  Order now</button>
        <button class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#personalModal">üìÑ  Personal information</button>
        <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#socialModal">üîó Social media links</button>

      <% } else if (currentUser && currentUser._id.toString() === profileUser._id.toString()) { %>
        <!-- ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿµÿßÿ≠ÿ® ÿßŸÑÿ≠ÿ≥ÿßÿ® -->
        <a href="/users/editProfile" class="btn btn-sm btn-outline-secondary">‚úèÔ∏è   Edit profile</a>
        <a href="/settings" class="btn btn-sm btn-outline-primary">‚öôÔ∏è Settings</a>
        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#requestModal">üì•  Order now</button>
        <button class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#personalModal">üìÑ  Personal information</button>
        <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#socialModal">üîó  Social media links</button>
  <a href="/admin/dashboard" class="btn btn-warning mt-2">
      Admin control panel üõ†
  </a>

        <% } %>
    </div>
  </div>

  <hr>

  <!-- ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÜÿ¥Ÿàÿ±ÿßÿ™ -->
  

<!-- ÿ≥ŸÉÿ±ÿ®ÿ™ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ© -->




  <!-- View All Services Button -->
  <div class="text-center mb-4">
    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#servicesModal">üíº View All Services</button>
  </div>
  <div class="profile-links">
  <!-- ÿßŸÑÿ≥ÿ∑ÿ± ÿØÿßÿÆŸÑ ÿßŸÑŸÄ if ŸÅŸä profile-links -->
<% if (currentUser && currentUser._id.toString() === profileUser._id.toString()) { %>
  <a href="/profile-campaigns/profile/<%= profileUser._id %>" class="btn btn-info">View My Campaigns</a>
<% } else { %>
  <a href="/profile-campaigns/profile/<%= profileUser._id %>" class="btn btn-info">View Campaigns</a>
<% } %>

<!-- ÿπÿ±ÿ∂ ÿßŸÑÿ±ÿ≥ŸÖ ÿßŸÑÿ®ŸäÿßŸÜŸä ŸÅŸÇÿ∑ ŸÑÿµÿßÿ≠ÿ® ÿßŸÑÿ®ÿ±ŸàŸÅÿßŸäŸÑ -->
<% if (currentUser && profileUser && currentUser._id.toString() === profileUser._id.toString()) { %>
  <!-- ÿßŸÑÿ±ÿ≥ŸÖ ÿßŸÑÿ®ŸäÿßŸÜŸä ŸáŸÜÿß -->
<% } %>

<!-- ÿ™ÿπÿØŸäŸÑ ÿπÿ±ÿ∂ ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑŸÉÿ®Ÿäÿ±ÿ© -->



  <!-- ÿ±ÿßÿ®ÿ∑ ÿßŸÑŸÖÿ§ÿ´ÿ±ŸäŸÜÿå Ÿáÿ∞ÿß ÿßŸÑÿ±ÿßÿ®ÿ∑ ŸäŸÖŸÉŸÜ ÿ£ŸÜ Ÿäÿ∏Ÿáÿ± ŸÑŸÑÿ¨ŸÖŸäÿπ -->
  <a href="/campaigns/influencers" class="btn btn-info">View Influencers</a>
</div>



<br>
<% if (currentUser && profileUser && currentUser._id.toString() === profileUser._id.toString()) { %>
  <!-- ÿπÿ±ÿ∂ ÿßŸÑŸÖÿÆÿ∑ÿ∑ ŸÅŸÇÿ∑ ŸÑÿµÿßÿ≠ÿ® ÿßŸÑÿ≠ÿ≥ÿßÿ®-->
  <div class="card mb-4">
    <div class="card-body">
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  
  <script>
  document.addEventListener('DOMContentLoaded', function () {
    const followForm = document.getElementById('followForm');
    const followButton = document.getElementById('followButton');
    const followersCount = document.getElementById('followersCount');

    if (followForm) {
      followForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        const userId = this.getAttribute('data-userid');
        const isFollowing = followButton.innerText.trim() === 'ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©';
        const url = isFollowing ? `/users/unfollow/${userId}` : `/users/follow/${userId}`;

        try {
          const res = await fetch(url, { method: 'POST' });

          if (!res.ok) {
            const errText = await res.text();
            alert('ÿÆÿ∑ÿ£: ' + errText);
            return;
          }

          const data = await res.json();  // ŸÜŸÅÿ™ÿ±ÿ∂ ÿ£ŸÜŸÉ ÿ≥ÿ™ÿ±ÿ¨ÿπ JSON ÿ®ÿØŸÑÿßŸã ŸÖŸÜ ÿ•ÿπÿßÿØÿ© ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿµŸÅÿ≠ÿ©
          if (data.success) {
            // ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ≤ÿ± ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ŸÖÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ™ÿßÿ®ÿπ ÿ£Ÿà ŸÑÿß
            followButton.innerText = isFollowing ? 'ŸÖÿ™ÿßÿ®ÿπÿ©' : 'ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©';
            followButton.classList.toggle('btn-outline-danger');
            followButton.classList.toggle('btn-outline-primary');
            
            // ÿ™ÿ≠ÿØŸäÿ´ ÿπÿØÿØ ÿßŸÑŸÖÿ™ÿßÿ®ÿπŸäŸÜ
            followersCount.innerText = data.followersCount;
          } else {
            alert('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ŸÅÿßÿπŸÑ');
          }
        } catch (err) {
          console.error('Follow/Unfollow error:', err);
          alert('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ');
        }
      });
    }
  });
</script>
  <script>
    const ctx = document.getElementById('statsChart').getContext('2d');
    const statsChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Likes', 'Comments'],
        datasets: [{
          label: 'Post Stats',
          data: [<%= posts.reduce((acc, p) => acc + p.likes.length, 0) %>, <%= posts.reduce((acc, p) => acc + p.comments.length, 0) %>],
          backgroundColor: ['#007bff', '#28a745']
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { beginAtZero: true }
        }
      }
    });
  </script>
<% } %>

<div class="row">
  <% if (!posts || posts.length === 0) { %>
    <p class="text-center text-muted">No posts yet.</p>
  <% } else { %>
    <% posts.forEach(post => { %>
      <div class="col-md-6 col-lg-4 mb-4">
        <div class="card">
          <% if (post.mediaType === 'image') { %>
            <img src="<%= post.media %>" class="card-img-top" alt="Post Image" style="max-height: 250px; object-fit: cover;">
          <% } else if (post.mediaType === 'video') { %>
            <video controls class="w-100" style="max-height: 250px; object-fit: cover;">
              <source src="<%= post.media %>" type="video/mp4">
              Your browser does not support video playback.
            </video>
          <% } %>
          <div class="card-body">
            <p><strong><%= profileUser.username %></strong></p>
            <p><%= post.caption %></p>
            <small class="text-muted"><%= post.likes.length %> Likes ‚Ä¢ <%= post.comments.length %> Comments</small>
            <a href="/posts/<%= post._id %>" class="btn btn-sm btn-outline-primary mt-2">View Post</a>
          </div>
        </div>
      </div>
    <% }) %>
  <% } %>
</div>



<!-- Request Modal -->
<!-- Modal for Request -->
<div class="modal fade" id="requestModal" tabindex="-1" aria-labelledby="requestModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
     <form id="orderForm">
  <input type="hidden" name="sellerId" value="<%= profileUser._id %>" />
  <input type="hidden" name="serviceId" id="serviceId" value="" />

  <div class="mb-3">
    <label for="productName" class="form-label">Request Title / Service</label>
    <input type="text" class="form-control" name="productName" id="productName" required />
  </div>

  <div class="mb-3">
    <label for="details" class="form-label">Request Details</label>
    <textarea class="form-control" name="productDescription" id="details" rows="4" required></textarea>
  </div>

  <div class="mb-3">
    <label for="budget" class="form-label">Proposed Budget (in USD)</label>
    <input type="number" class="form-control" name="proposedBudget" id="budget" min="1" required />
  </div>

  <div class="mb-3">
    <label for="buyerEmail" class="form-label">Your Email</label>
    <input type="email" class="form-control" id="buyerEmail" value="<%= currentUser.email %>" readonly />
  </div>

  <div id="formResult" class="text-center mb-3"></div>
  <div class="modal-footer">
    <button type="submit" class="btn btn-success">Submit Request</button>
    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
  </div>
</form>

    </div>
  </div>
</div>

<!-- Services Modal -->
<div class="modal fade" id="servicesModal" tabindex="-1" aria-labelledby="servicesModalLabel" aria-hidden="true" data-bs-backdrop="true" data-bs-keyboard="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">üõ†Ô∏è Available Services</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-start">
        <% if (profileUser.services?.length > 0) { %>
          <% profileUser.services.forEach(service => { %>
            <p><strong><%= service.name %>:</strong> <%= service.description %></p>
            <button type="button" class="btn btn-sm btn-outline-danger" 
                    data-bs-toggle="modal" data-bs-target="#requestModal"
                    onclick="setServiceId('<%= service._id %>', '<%= service.name %>')">Request Now</button>
          <% }) %>
        <% } else { %>
          <p>No services available.</p>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Modals -->
<div class="modal fade" id="personalModal" tabindex="-1" aria-labelledby="personalModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">üìÑ Personal Information</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-start">
        <p><strong>Name:</strong> <%= profileUser.fullName || 'Not specified' %></p>
        <% if (profileUser.showEmail) { %>
        <p><strong>Email:</strong> <%= profileUser.email || 'Not specified' %></p>
        <% } %>
        <p><strong>Phone:</strong> <%= profileUser.phone || 'Not specified' %></p>
        <p><strong>Location:</strong> <%= profileUser.location || 'Not specified' %></p>
        <p><strong>Date of Birth:</strong> <%= profileUser.dob ? profileUser.dob.toDateString() : 'Not specified' %></p>
        <p><strong>Gender:</strong> 
          <%= profileUser.gender === 'male' ? 'Male' : profileUser.gender === 'female' ? 'Female' : 'Not specified' %>
        </p>
        <p><strong>Bio:</strong> <%= profileUser.bio || 'No bio available' %></p>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="socialModal" tabindex="-1" aria-labelledby="socialModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">üåê Social Links</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-start">

        <% if (profileUser.links?.tiktok) { %>
          <p><i class="bi bi-tiktok"></i> <a href="<%= profileUser.links.tiktok %>" target="_blank">TikTok</a></p>
        <% } %>

        <% if (profileUser.links?.instagram) { %>
          <p><i class="bi bi-instagram"></i> <a href="<%= profileUser.links.instagram %>" target="_blank">Instagram</a></p>
        <% } %>

        <% if (profileUser.links?.github) { %>
          <p><i class="bi bi-github"></i> <a href="<%= profileUser.links.github %>" target="_blank">GitHub</a></p>
        <% } %>

        <% if (profileUser.links?.linkedin) { %>
          <p><i class="bi bi-linkedin"></i> <a href="<%= profileUser.links.linkedin %>" target="_blank">LinkedIn</a></p>
        <% } %>

        <% if (profileUser.links?.facebook) { %>
          <p><i class="bi bi-facebook"></i> <a href="<%= profileUser.links.facebook %>" target="_blank">Facebook</a></p>
        <% } %>

        <% if (profileUser.links?.x) { %>
          <p><i class="bi bi-twitter-x"></i> <a href="<%= profileUser.links.x %>" target="_blank">X</a></p>
        <% } %>

        <% 
          const links = profileUser.links;
          const hasLinks = links?.tiktok || links?.instagram || links?.github || links?.linkedin || links?.facebook || links?.x;
        %>
        <% if (!hasLinks) { %>
          <p>No links available.</p>
        <% } %>

      </div>
    </div>
  </div>
</div>



<script src="/socket.io/socket.io.js"></script>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  // ÿßŸÑÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ ÿπŸÜÿØ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ
  document.getElementById('orderForm').addEventListener('submit', async function(event) {
    event.preventDefault();  // ŸÖŸÜÿπ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä ŸÑŸÑŸÜŸÖŸàÿ∞ÿ¨

    const form = event.target;  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨
    const formData = new FormData(form);  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨

    // ÿ™ÿ≠ŸàŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ FormData ÿ•ŸÑŸâ JSON
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });

    try {
      // ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸÑŸâ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Fetch API
      const response = await fetch('/orders/submit-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',  // ŸÜŸàÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™Ÿä Ÿäÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑŸáÿß
        },
        body: JSON.stringify(data),  // ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ•ŸÑŸâ JSON
      });

      const result = await response.json();  // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ±ÿØ ŸÖŸÜ ÿßŸÑÿ≥Ÿäÿ±ŸÅÿ±

      // ÿ•ÿ∞ÿß ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠
      const formResult = document.getElementById('formResult');
      if (response.ok) {
        formResult.style.color = 'green';
        formResult.textContent = result.message || 'Request sent successfully.';
        form.reset();  // ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ ÿ®ÿπÿØ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ
      } else {
        formResult.style.color = 'red';
        formResult.textContent = result.error || 'Failed to send request.';
      }
    } catch (error) {
      // ÿ•ÿ∞ÿß ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ
      document.getElementById('formResult').textContent = 'Error sending request.';
      console.error('Fetch error:', error);
    }
  });
</script>


<script>
  // This function is called when the user clicks on "ÿßÿ∑ŸÑÿ® ÿßŸÑÿ¢ŸÜ"
  function setServiceId(serviceId, serviceName) {
    // Set the hidden serviceId field in the order form
    document.getElementById('serviceId').value = serviceId;
    // Optionally, set the service name as the product name
    document.getElementById('productName').value = serviceName;
  }
</script>
<script>
  document.getElementById('orderForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const form = e.target;
    const formResult = document.getElementById('formResult');
    formResult.innerHTML = '';

    // Extract data
    const data = {
      sellerId: form.sellerId.value,
      sellerUsername: form.sellerUsername.value,
      productName: form.productName.value,
      productDescription: form.details.value,
      proposedBudget: form.budget.value ? Number(form.budget.value) : null
    };

    // Validate input
    if (!data.productDescription.trim()) {
      formResult.innerHTML = '<span class="text-danger">‚ùå Please enter request details.</span>';
      return;
    }

    if (data.proposedBudget === null || isNaN(data.proposedBudget) || data.proposedBudget <= 0) {
      formResult.innerHTML = '<span class="text-danger">‚ùå Please enter a valid budget.</span>';
      return;
    }

    try {
      const res = await fetch('/orders/submit-order', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(data)
      });

      if (!res.ok) throw new Error('Request submission failed');

      formResult.innerHTML = '<span class="text-success">‚úÖ Request submitted successfully!</span>';
      form.reset();
    } catch (error) {
      formResult.innerHTML = '<span class="text-danger">‚ùå An error occurred while submitting the request.</span>';
      console.error(error);
    }
  });
</script>
<script>
  // When the services modal is closed, remove the backdrop
  $('#servicesModal').on('hidden.bs.modal', function () {
    $('.modal-backdrop').remove(); // This will remove the backdrop from the page
  });
</script>

<script>
  const theme = <%- JSON.stringify(currentUser?.themeSettings || {}) %>;

  for (const [key, val] of Object.entries(theme)) {
    document.documentElement.style.setProperty('--' + key.replace(/([A-Z])/g, "-$1").toLowerCase(), val);
  }
</script>


<script>
    const canvasCount = 8;
    const canvases = [];
    const animations = [];
    let activeIndex = -1;
    let animationFrameId;

    for (let i = 0; i < canvasCount; i++) {
      const canvas = document.getElementById(`canvas${i}`);
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      canvases.push(canvas);
      animations.push(getAnimation(i, canvas));
    }

    function clearAll() {
      if (animationFrameId) cancelAnimationFrame(animationFrameId);
    }

    function getAnimation(index, canvas) {
      const ctx = canvas.getContext('2d');
      const w = canvas.width;
      const h = canvas.height;

      switch(index) {
        case 0: // ŸÅŸÇÿßÿπÿßÿ™
          const bubbles = Array.from({length: 50}, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            r: Math.random() * 10 + 5,
            speed: Math.random() * 1 + 0.5
          }));
          return function animateBubbles() {
            ctx.clearRect(0, 0, w, h);
            ctx.fillStyle = "rgba(255,255,255,0.1)";
            bubbles.forEach(b => {
              b.y -= b.speed;
              if (b.y < -b.r) b.y = h + b.r;
              ctx.beginPath();
              ctx.arc(b.x, b.y, b.r, 0, Math.PI * 2);
              ctx.fill();
            });
            animationFrameId = requestAnimationFrame(animateBubbles);
          };

        case 1: // ÿÆÿ∑Ÿàÿ∑ ÿ™ÿ™ÿ≠ÿ±ŸÉ
          let t1 = 0;
          return function animateLines() {
            ctx.clearRect(0, 0, w, h);
            ctx.strokeStyle = 'cyan';
            for (let i = 0; i < 20; i++) {
              ctx.beginPath();
              for (let x = 0; x < w; x++) {
                const y = h / 2 + Math.sin((x + t1 + i * 50) * 0.01) * 30;
                ctx.lineTo(x, y);
              }
              ctx.stroke();
            }
            t1 += 2;
            animationFrameId = requestAnimationFrame(animateLines);
          };

        case 2: // ŸÜÿ¨ŸàŸÖ ÿ™ŸÑŸÖÿπ
          const stars = Array.from({length: 100}, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            r: Math.random() * 2,
            opacity: Math.random()
          }));
          return function animateStars() {
            ctx.clearRect(0, 0, w, h);
            stars.forEach(s => {
              ctx.beginPath();
              ctx.arc(s.x, s.y, s.r, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(255,255,255,${s.opacity})`;
              ctx.fill();
              s.opacity += (Math.random() - 0.5) * 0.05;
              if (s.opacity > 1) s.opacity = 1;
              if (s.opacity < 0) s.opacity = 0;
            });
            animationFrameId = requestAnimationFrame(animateStars);
          };

        case 3: // ŸÖŸàÿ¨ÿßÿ™
          let t2 = 0;
          return function animateWaves() {
            ctx.clearRect(0, 0, w, h);
            ctx.strokeStyle = 'rgba(0,150,255,0.5)';
            ctx.lineWidth = 2;
            for (let y = 0; y < h; y += 20) {
              ctx.beginPath();
              for (let x = 0; x < w; x++) {
                const offset = Math.sin((x + t2) * 0.01) * 10;
                ctx.lineTo(x, y + offset);
              }
              ctx.stroke();
            }
            t2 += 1;
            animationFrameId = requestAnimationFrame(animateWaves);
          };

        case 4: // ŸÖÿ±ÿ®ÿπÿßÿ™ ŸÜÿ∑ÿßÿ∑ÿ©
          const squares = Array.from({length: 30}, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            size: Math.random() * 30 + 10,
            dx: (Math.random() - 0.5) * 2,
            dy: (Math.random() - 0.5) * 2
          }));
          return function animateSquares() {
            ctx.clearRect(0, 0, w, h);
            ctx.fillStyle = 'rgba(0,255,0,0.4)';
            squares.forEach(s => {
              ctx.fillRect(s.x, s.y, s.size, s.size);
              s.x += s.dx;
              s.y += s.dy;
              if (s.x < 0 || s.x + s.size > w) s.dx *= -1;
              if (s.y < 0 || s.y + s.size > h) s.dy *= -1;
            });
            animationFrameId = requestAnimationFrame(animateSquares);
          };

        case 5: // ÿØŸàÿßÿ¶ÿ± ÿØŸàŸëÿßÿ±ÿ©
          let angle = 0;
          return function animateRotating() {
            ctx.clearRect(0, 0, w, h);
            for (let i = 0; i < 10; i++) {
              const radius = 100 + i * 20;
              const x = w / 2 + Math.cos(angle + i) * radius;
              const y = h / 2 + Math.sin(angle + i) * radius;
              ctx.beginPath();
              ctx.arc(x, y, 10, 0, Math.PI * 2);
              ctx.fillStyle = `hsl(${i * 36}, 100%, 50%)`;
              ctx.fill();
            }
            angle += 0.05;
            animationFrameId = requestAnimationFrame(animateRotating);
          };

        case 6: // ÿØÿÆÿßŸÜ ŸàŸáŸÖŸä
          let smokeParticles = Array.from({length: 60}, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            r: Math.random() * 50,
            opacity: Math.random() * 0.1
          }));
          return function animateSmoke() {
            ctx.clearRect(0, 0, w, h);
            smokeParticles.forEach(p => {
              ctx.beginPath();
              ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(200, 200, 200, ${p.opacity})`;
              ctx.fill();
              p.y -= 0.3;
              if (p.y < -p.r) {
                p.y = h + p.r;
                p.x = Math.random() * w;
              }
            });
            animationFrameId = requestAnimationFrame(animateSmoke);
          };

        case 7: // ŸÖÿ∑ÿ± ÿ£Ÿà ÿ¥Ÿáÿ®
          const drops = Array.from({length: 80}, () => ({
            x: Math.random() * w,
            y: Math.random() * h,
            length: Math.random() * 20 + 10,
            speed: Math.random() * 4 + 2
          }));
          return function animateRain() {
            ctx.clearRect(0, 0, w, h);
            ctx.strokeStyle = "rgba(173,216,230,0.6)";
            drops.forEach(d => {
              ctx.beginPath();
              ctx.moveTo(d.x, d.y);
              ctx.lineTo(d.x, d.y + d.length);
              ctx.stroke();
              d.y += d.speed;
              if (d.y > h) d.y = -d.length;
            });
            animationFrameId = requestAnimationFrame(animateRain);
          };

        default:
          return () => {};
      }
    }

    function showRandomCanvas() {
      if (activeIndex >= 0) {
        canvases[activeIndex].style.display = 'none';
      }

      clearAll();

      let newIndex;
      do {
        newIndex = Math.floor(Math.random() * canvasCount);
      } while (newIndex === activeIndex);

      activeIndex = newIndex;
      const canvas = canvases[activeIndex];
      canvas.style.display = 'block';
      animations[activeIndex](); // Start animation
    }

    // ÿ£ŸàŸÑ ŸÖÿ±ÿ©
    showRandomCanvas();
    setInterval(showRandomCanvas, 10000); // ŸÉŸÑ 10 ÿ´ŸàÿßŸÜŸä
  </script>

</body>
</html>
